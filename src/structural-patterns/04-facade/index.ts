/**
 * 外观（Facade）
 * 定义： 为子系统中的一组接口提供一个一致的界面，Facade模式定义一个高层接口，这个接口使得这个子系统更加容易使用。
 * 结构：
 *     -- Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的
 *        功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。
 *     -- SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，
 *        而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，
 *        它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。
 * 适用场景：
 *     -- 客户程序与抽象类的实现部分之间存在着很大的依赖性。外观模式分离子系统，提高子系统的独立性和可移植性。
 *     -- 当你需要构建一个层次结构的子系统时，使用外观模式定义子系统的入口点。
 *        让子系统间通过外观进行通讯，简化互相之间的依赖关系。
 */
