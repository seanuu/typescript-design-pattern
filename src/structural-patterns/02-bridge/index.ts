/**
 * 桥接（Bridge）
 * 定义：将抽象部分与他的实现部分分离，使他们都可以独立地变化。
 * 结构：
 *     -- Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口。
 *     -- RefinedAbstraction（扩充抽象类）：扩充由 Abstraction 定义的接口，通常情况下它不再是抽象类而是具体类
 *     -- Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同
 *     -- ConcreteImplementor（具体实现类）：具体实现Implementor接口
 * 适用场景：
 *     -- 如果一个系统需要在抽象化和具体化之间增加更多的灵活性，
 *        避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系
 *     -- 抽象部分 和 实现部分 可以以继承的方式独立扩展而互不影响，
 *        在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，
 *        即系统需要对抽象化角色和实现化角色进行动态耦合；
 *     -- 一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩展；
 * 优点：
 *     -- 分离接口及其实现部分
 *     -- 提高可扩充性
 *     -- 实现细节对客户透明
 * 缺点：
 *     -- 桥接模式的使用会增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程
 *     -- 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性
 * 相关模式：
 *     -- 抽象工厂模式可以用来创建和配置一个特定的桥接模式。即一个维度的产品都由抽象工厂生成。
 *     -- 和适配器模式的区别：适配器模式用来帮助无关的类协同工作，他通常在系统设计完成后才会被使用
 *        桥接模式是在系统开始时就被使用，他使得抽象接口和实现部分可以独立进行改变。
 */
